(let {int * int * (int * int -> int) * int -> int} recurse  = recfun rc {int * int * (int * int -> int) * int -> int} x y operation initvalue -> if y = 0 then initvalue else (operation x (rc x (y - 1) operation initvalue)) end end in {int * int * (int * int -> int) * int -> int} (recurse 2 3 fun {int * int -> int} x z -> x * z end 1) end) 