# Intial test for stack, without the lookup.

### Minimal workking example.
let stack = 
	class method Makeempty() -> this.Content := []; this
    	  end
   	end
in
	let mystack = (new stack)
	in
		mystack.Makeempty()
  	end
 end

###

let stack = 
	class method Makeempty() -> this.Content := []; this
    	  end
   	end
in
	let stackWithTop = 
		class extends stack
			method Top() -> this.Content.First
			end
		end
	in
		let mystack = (new stackWithTop)
		in
			mystack.Makeempty()
		end
  	end
 end
 
 ###



let stack = [ Push: fun this x -> this.Content := x :: this.Content end, 
	     	  Pop: fun this ->  
						let top = this.Content.First 
						in 
							this.Content := this.Content.Second; 
							top 
						end 
					end, 
			  Makeempty: 
				fun this -> 
					this.Content := []; 
					this 
				end 
       		]
 in   
 	let mystack = (new stack) in mystack := (stack.Makeempty mystack); 
 											(stack.Push mystack 2); 
 											(stack.Push mystack 3); 
 											(stack.Push mystack 4) 
 	end
 end
 
 # more oPL like
 
 let stack = 
	class method Push(x) -> this.Content := x :: this.Content 
	      end
	      method Pop()   -> let top = this.Content.First 
	                        in
	                          this.Content := this.Content.Second;
	                          top
        end
        method Makeempty() -> this.Content := []; this
        end
        method Pushtwice(x) -> this.Push(x);
                               this.Push(x)
        end
    end
  in
    let stackWithTop =
      class extends stack
            method Top() -> this.Content.First
            end
      end
    in    
      let myStackWithTop = (new stackWithTop)
      in
        myStackWithTop.Makeempty();
        myStackWithTop.Push(1);
        myStackWithTop.Push(2);
        myStackWithTop.Push(myStackWithTop.Pop() + myStackWithTop.Pop());
        myStackWithTop.Top()
      end
    end
  end
 
 # Stack example with lookup
 
 let stack = [ Push: fun this x -> this.Content := x :: this.Content end, 
	     	   Pop: fun this ->  
						let top = this.Content.First 
						in 
							this.Content := this.Content.Second; 
							top 
						end 
					end, 
			   Makeempty: 
				fun this ->
					this.Parent := stack 
					this.Content := []; 
					this 
				end,
			   Pushtwice:
			   	fun this x ->
			   		((lookup this Push) this x);
			   		((lookup this Push) this x)
			   	end 
       		]
 in   
 	
 	
 	let mystack = (new stack) in 
 		mystack := (stack.Makeempty mystack); 
 				   (stack.Pushtwice mystack)
 	end
 end